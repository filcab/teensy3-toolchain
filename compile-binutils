#!/bin/sh

source "`dirname $0`/utils/defs.sh"

function usage {
    msg "The only available command-line argument is:"
    msg "  -q/--quiet/-s/--silent: quiet configure/make output"
    if [ ! -z $1 ]; then
      # We're failing because we got the wrong arguments.
      # explain the behavior and exit with failure
      msg ""
      msg "Any other command line argument will print this message"
      exit 1
    fi
}

QUIET=
case "$1" in
  -q|--quiet|-s|--silent)
    QUIET="--quiet"
    ;;
  -h|-help|--help)
    usage
    exit 0
    ;;
  *)
    # Only fail if an argument was provided
    test ! -z "$1" && usage fail
    ;;
esac

# We're assuming 'tar xf file' will autodetect compression
# if yours doesn't, change the extract_src function

# versions for the files in $ROOT/distfiles
BIN_VERSION=2.24

# We disable -Werror because the binutils people use deprecated functions
# that aren't in POSIX anymore, and silently truncate longs to ints in
# code that doesn't appear (target) 64-bit safe, but that shouldn't be a
# problem for my use-case. They don't seem to care because part of this
# comes from a warning that gcc doesn't have, and the other part is
# because I'm not using glibc.
BIN_CONF_FLAGS="--enable-interwork --disable-libstdcxx --disable-werror"

function extract_src {
  pkg="$1"
  ext="$2"
  if [ ! -d "$SRCDIR/$pkg" ]; then
    mkdir -p "$SRCDIR"
    pushd "$SRCDIR" >/dev/null
    tar xf "$DISTFILES/$pkg$ext"
    popd >/dev/null
  fi
}

# binutils
extract_src "binutils-$BIN_VERSION" ".tar.bz2"
mkdir -p "$OBJDIR/binutils"
pushd "$OBJDIR/binutils" >/dev/null
# Only run configure if there's no Makefile
msg "Configuring binutils"
test ! -f "$OBJDIR/binutils/Makefile" && (
  "$SRCDIR/binutils-$BIN_VERSION/configure" $QUIET --prefix="$PREFIX" --target="$TARGET" $BIN_CONF_FLAGS \
  || die "Error configuring binutils" )
msg "Compiling and installing binutils to $PREFIX"
make $QUIET all install-binutils install-ld || die "Error compiling binutils"
popd >/dev/null
